To do file for red-green web-based game.

= how to restart =
== local work ==
 - cd ~/work/games/red-green ; ./start_server
 - from timdesk: chrome: http://localhost:8000/rg.cgi?user_id=one
   - this browser should have the cookie for user_id==one
 - from timdesk: firefox: http://localhost:8000/rg.cgi?user_id=admin-game-admin
   - this browser should have the cookie for user_id==admin-game-admin (alias=admin)
 - from laptop: chrome: http://10.0.1.61:8000/rg.cgi?user_id=ABCDEF
   - this browser should have the cookie for user_id==ABCDEF (alias=two)

== birdcloud work ==
 - edit rg.cgi
   - cd ~/work/games/red-green/cgi-bin
   - vi rg.cgi
   - ./stop-uwsgi
   - (in other window) ./start-uwsgi
 - browse as admin:
   - firefox https://birdcloud.org/rg?user_id=admin-game-admin
 - browse as user:
   - timdesk: chrome https://birdcloud.org/rg (register as 'one')
   - laptop: chrome https://birdcloud.org/rg (register as 'two')

== closinggame.net work ==
 - start server and wsgi gateway
   - systemctl start nginx (if not already running)
   - cd ~/work/games/red-green
   - ./start-uwsgi
 - edit rg.cgi
   - cd ~/work/games/red-green
   - vi rg.cgi
 - browse as admin:
   - firefox https://closinggame.net/rg?user_id=admin-game-admin
 - browse as user:
   - timdesk: chrome https://closinggame.net/rg (register as 'one')
   - laptop: chrome https://closinggame.net/rg (register as 'two')

= to do =
 - add real questions to trivia.py
   - add images to image directory
   - allow html to reference images

 - work on performance:
   - change to use UNIX socket, instead of 127.0.0.1:3031, for interface between
     nginx and uwsgi
   - use threading in python and rg.cgi
   - use static pages
     - generate static pages for each state transition
     - Javascript to load static page
       - do minimal processing in rg.cgi, and send back user_id, still_in status, and
         name of static page to load
       - Javascript should load static page via nginx
     - make 14 pages per question/round
       - every combination of 
   - add 'key' to question data (so users can't guess the next form
     and load the static html page)
   - don't import stuff that's not needed
     - only import valid_user_ids on registration
     - only import trivia or rps when being used
   - don't have uwsgi log to terminal window
     - send log to a file
   - remove answers from user files - ??
     - eliminate: clear_user_answers()
     - check places where user file is read/written and remove last_answer field
     - get rid of last_answer field in:
       - read_user()
       - clear_user_answers()
       - update_user_status()
       - save_answer()
   - move users to faster (in-memory) storage
     - need to support read from disk, in case script relaunches
     - avoid reading some or all user data on every client refresh
       - read data for admin stats using in-memory dictionary
       - could put user alias in cookie, and only read status from still_in_dir
     - avoid writing to all user data
       - remove last_answer (see above)
       - remove status?? (no, only admin writes to all users)

 - show stats on show_answers and show_results page:
   - number of users with correct/incorrect answers
   - number of users eliminated this round, number still-in
 - show number of each answer on the qwaiting and rwaiting pages, for admin
 - remove all FIXTHIS items
 - fix all bugs (see below)
 - test it with multiple participants
 - add message when user is eliminated
 - make the player screen pretty
   - change page colors
   - add graphics
   - user nicer layout
 - add score to user, and display on "done" page.
   - add score to user file
 - make the admin controls stateful
   - highlight phase of game we're in (trivia or rps)
   - indicate the next logical action
     - if still_in_count > 15, disable declare_winners
     - if state=="question", disable next_question (or highlight show_answer)
     - etc
 - add alternate options to rps:
   - rock, paper, scissors, lizard, spock
   - windows, linux, mac
   - Linus, Greg, Andrew
   - Intel, Arm, RiscV
   - add "flavor" text to rps game
 - handle situation where everyone is eliminated
   - create action for 'reset to last still-in group'
     - user status field from user data for this?
   - save still-in on 'next question'
     - erase all files in still_in_backup
     - copy all files from still_in dir to still_in_backup
   - make action 'restore_still_in"
     - copy all files from still_in_backup to still_in dir

== rejected todos ==
 - add 'logout' link for users
 - prevent someone from taking over another person's session
   - all you have to do is know the confirmation number, and then you put it
     in a cookie as your user_id, and it causes mayhem
   - could validate IP address?
   - too much for now

== fix bugs ==
 - sometimes, the server and browser get stuck
   - I have to ctrl-C the server and restart it
   - not sure if it's related to missing html_start()??

== done ==
 + 2020-06-27
 + add images to rps game
   + make images dir in web directory
   + put images there
   + reference them in html
     + show_rps_query_form
     + show_rps_waiting_page
     + show_result_page
 + add number of questions and number of rounds to html_end status
 + create question dir when admin starts question or rps round
 + handle situation where someone joins late
   + if someone registers, and the phase is not "registration", then 
     start them in "out" state
 + make script work on closinggame.net
   + start uwsgi manually 
     + write start-uwsgi script
     + write stop-uwsgi script
     + write reload-nginx script
 + 2020-06-24 make still_in_dir - to hold still-in status
   + redundant with still-in field in user file
   + populate still_in_dir with all user ids on 'next_question' or 'next_round'
 + add reload ('this link') link for users
 + make sure users who don't answer a question are eliminated
   + reset still-in status on 'answer_question" or 'show_result'
   + modify update_user_status()
 + remove filematch for user filenames in user_dir
   + change user filename to user_id
 + players are eliminated even on correct answers
 + support global suppression of refresh
   + just provide a link to start
   + change message about "page will automatically refresh", and provide a link
 + 2020-06-23 login is not working
   + click on birdcloud.org/rg, and it doesn't have the user logged in
     + show messages for account lookup
     + are we getting the cookie? no
   + use correct environ dictionary for WSGI
 + resolve refresh issue
   + only do an action once, then change the url for action=none ??
     + why is refresh resending the URL data (?action=next_question)
   + was a bug with quotes in the meta refresh line
 + support action=logout
2020-06-11 + convert everything to wsgi 
   + install flask - see NOTES-flask-install.txt
   + convert all prints to html_append
   + convert user database to internal data structure (user dictionary?)
   + eliminate global variables
     + put them into data_class
     + admin_view
     + header_shown
     - show_data (leave this one)
   + call start_response with headers and cookies
   + return html to wsgi, along with headers (cookies), etc.

== game outline ==
   - have game phases:
     - registration
       - do registration while doing announcements and thank-yous
     - red-green game
     - rock-paper-scissors (RPS)
   - registration page
       - server keeps track of players still alive in a round
       - admin allows for visibility of next question
         - have 2 interfaces: admin, player
           - admin interface:
             - number voted
               - number red, green, both, neither
               - number left in round, current question
             - names of players left in round (if less than 20)
           - admin links:
             - reveal answer
             - go to next question
             - reset voters
               - end round, designate winners
           - player interface:
             - question page:
               - current question
               - answer selection form:
                 - red, green checkboxes
               - eliminated status (still in or not)
             - waiting page: 
               - player answer (red, green, both, neither)
               - number left in round
               - eliminated status (still in or not)
             - answer page:
               - player answer (red, green, both, neither)
               - indication of correct or not
               - number left in round
               - eliminated status (still in or not)
       - game is played in 'rounds'
       - rock, paper, scissors - online
         - admin interface
             - number voted
               - number rock, paper, scissors
               - number still voting
               - current round number
         - admin links:
            - reveal answer
         - player interface:
             - question page:
               - current question = always (rock, paper or scissors)
               - answer selection form:
                 - rock, paper, scissors radio button
               - eliminated status (still in or not)
             - waiting page: 
               - player answer (rock, paper or scissors)
               - number left in round
               - eliminated status (still in or not)
             - answer page:
               - player answer (rock, paper, or scissors)
               - admin choice (rock, paper, or scissors)
               - indication of correct or not
               - number left in round
               - eliminated status (still in or not)


= done =
 + determine how game will work
 + define phases: registration, trivia, rps
   + create registration phase
     + create file per user 
       + has data: player id, email, name, alias, answers, status 
     + create registration form page
     + create user cookie
       + make sure cookie works
     + add 'logout' action
 + create wait-for-game-start page (refreshing while waiting for admin)
   + count number of users
   + put user_id and number of users on waiting page

 + create 'start_game' action
   + move to 'trivia' phase, and set question_num to 1

 + create trivia phase
   + create trivia file
   + create question page
     + with answer form
   + create question_waiting page
     + show user's answer
     + show count of votes
     + show users status
   + create answer page
     + show user's answer
   + move change user status to 'out', when they get answer wrong
   + clear users answers when starting next question

 + create "declare winners" action
   + save winners to file
     + save data for each winner (users with status 'still-in')
 + create "reset status" action
   + move all users back to 'still-in' status
 + create show_winners page
   + show list of winners
     + read winner file
     + show alias for each winner
     + on admin page, show a link to 'reset status'

 + create 'start_rps' action
   + change all user statuses to "still-in"

 + create rps phase
   + create rps file
     + import rps data
   + create show_rps function
 + create show_result_page
 + create show_rps_waiting_page
